
package otp;

public class OTP {

    static final String[] cipher
            = {
                "0E3971C5DD3BD51904714BB0E0E179C462EE626DF05A3F7A3886A540B94EA18D9D4980AAF5D2FF160F686F0C84D24F959A6C0E4687610E59DC189DDE72D39B925814E57DC8623D18A2EA040E89AF70DE73EF8EF44EA4C321CEC8D0208E902E98053A31E736097A9688A5CEC0EACE815937BA0E625EEFBFE0605DFAF5547B88CD49AFF04C1F5577C967D1732368D107C30C5454501E20981F0DB64F6055EB52D3B9EBAD6EA518EB7CB9FEF8371875188DF48DAED4B4F3B234B58034E54FD72F17509F9E5C0D448D5E3ECCF451071DF3AB5163B0C4FB6B6C1DD808B0C82EFD90E01F5EE70F4549A007C0786C6A93BD24BF886FAC662DB755",
                "2A3974C5C67ECE490E6B53B0EAF3378D6DA27D63A446223F799CA909A31AF585844480B3F2C3B1571A707B55999748949A750342C96A054DC45D8DC53DCE9D8F0214DB76C8622714E7EC45198DE86AD070E4CAA044BA976089C9DB36959634DD07752AA9775A65949EF1C4D4EACEC44F7FBE13650AA0BAA97350F7F811789EDA0DEAF05E14127BC77594706F6FC50086",
                "2E3971C5DD3BD51904714BB0E0E179D964AB2E61EB40257A3A87AC0DBF54A1869342CDE4F5C0FF55246D6B109C9B43979836466BC8740E5CCD4ADEDB72C89DD7175AD63885793D14E7FE411596E37D9F64F8CBA058B5D46A89CCD021DC85338F047E78E6705A608884EBC686BED28C1C64B60C740ABCA9E47454F3AC006B83DC0DE0EA48031263C664946F756FD6538202531D47",
                "363E6AD3906FD3061B2451F1FAB23ADF69AF7A69E013333F3A89B413B51AF685DC47C1AAEEC3BB57117E6011989F0D84DF601203C16C190AC74D8C966ADF9AD71251C1718F783C5FE7D94C1F88AF6FDA25F9C6EF5CFCD621CDC8CD2C9B9F7A890E3A39A975167C9E83F1",
                "42056C80C773C549046C49E5E5F6378A78EE7969A45924292DC8A20FA043AC909D43D4A1BAC7FF040A71691992D25E95D46C034DC4664B4BC65CDED178CED8965656DE778B7D6F1EA1AE501F9EFB388025C2CFF64EFCD621C5C2D12EDC902EDD15723DA97015799782F2C8C8AD",
                "42176FCC905ADE06027006D3E0E03AD865BA7D2CED40712A2C8AAD09A352E88E9B10C1E4E9C3AD1E066C2E1A91D24C82CE71054FC2704B45C6189BDB7FDF9C931350926B8D753A03AEFA5D5A91E66CD725EB8EF35FAED86FCE8DD82A9F8429DD0E7478E7730E62949FEE81D5AFD99C4E7EA318",
                "263F6780C974C94903765FB0FDFD79D87FAB2E75EB46237A3B9AA009BE1AF58F9851D9FBBAEFFF150A6B2E0C98870D98DB6E034D80774B53CD4CDF964ECE99850214DC779F",
                "232570D5DD7E9C1D1F6552B0E0B231CC7AAB2E68E15538343C8CE10EB54DA1B29D5EC4ABF78EEB454A3F671BD7914191C96B4642C9674B43C6189FD872CE90920414D17489653C51AEAE451D87E6769F61E58EEE4EAB9753C8C3DA2A91D973DD0E7434F0361B7B9FCDEC81C1A5CEC9587EB1077458AAA6FD244AF3FF01628F8603A1F55E51466ACD72D1206264DD539700511C471824CD1B5FA707684FEB5F96A9FAA63CB709FA7CA5FAF33757775EDEE389A490BCF2FD22B1942CBC06D8610A1F8C830E4256951B20D4BA551E1DE7BD5179F5CDFA3F391D9904BBC83DF19DFC165EE00E5349B2148266796A91B521EC923BE9782DAB100B00DC5DDE8916C2CAE609297401A7CDA129E1038B021479A0434DE21E2957450293E47C95B8E5067CE77D22CF27B10BDD002076A15D16723521096C0747B670CC56D5EC2D4380318D0AE1",
                "42256C80DE7EC41D336B53F2E5F779DA63BB6268A4523D2D3891B240A25FF5958E5E80B0F2C3FF110A6D7D01D7964285D8740303CE6D4B5EC05DDEC47CD49C981B14C17D99632A1FA4EB",
                "363E62D497689C1D1F6106E0FBFB37CE65BE6269A45C377A38C89113B54FE58FD162EE83B4868B1F063F60009A904882C9380751C2230545DC188CD37CD6948E5646D3768C7922",
                "363E6680C37EDF1B127006FDECE12ACC6BAB2E65F709710D318DAF40A549E88E9B10C1E4E9D2AD1202722E169E824595C8380846D166190ADD4B9B9669D29DD71D51CB3885793D14E7FA4C1B88AF77D166EF8EA81AEB8536999A8B6C"
            };

    public static void main(String[] args) {
int arr[][] = converthex();
        String target = "";
        char Maybe[][] = new char[arr[10].length][95];
        char Maybe2[][] = new char[arr[10].length][65];
        for (int i = 0; i < arr[10].length; i++) {
            int h = 0, g = 0;
            for (int alpha = 32; alpha < 127; alpha++) {
                char[] p = new char[10];
                for (int j = 0; j < arr.length - 1; j++) {
                    if (i >= cipher[j].length() / 2) {
                        p[j] = ' ';
                        continue;
                    }
                    int alpha_xor_cipher = (arr[10][i] ^ arr[j][i]) ^ alpha;
                    p[j] = (char) alpha_xor_cipher;
                }
                boolean flag = true, flag2 = true;
                for (int b = 0; b < 10; b++) {
                    String s = "\'\"!?-. ";
                    if (!(Character.isAlphabetic(p[b]) || p[b] == 32)) {
                        flag2 = false;
                    }
                    if (!(Character.isAlphabetic(p[b]) || s.contains(p[b] + ""))) {
                        flag = false;
                    }
                }
                if (flag) {
                    Maybe[i][h++] = (char) alpha;
                }
                if (flag2) {
                    Maybe2[i][g++] = (char) alpha;
                }
            }
            if (Maybe2[i][0] != '\0') {
                target += Maybe2[i][0];
            } else if (Maybe[i][0] != '\0') {
                target += Maybe[i][0];
            }
        }
        System.out.println("decryption " + target);
    }

    private static int[][] converthex() {
        int arr[][] = new int[cipher.length][cipher[10].length() / 2];
        for (int k = 0; k < cipher.length; k++) {
            int len = Math.min(cipher[10].length(), cipher[k].length());
            for (int j = 0, i = 0; j < len; j += 2, i++) {
                arr[k][i] = Integer.parseInt(cipher[k].substring(j, j + 2), 16);
            }
        }
        return arr;
    }
}

    


